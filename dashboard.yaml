title: BMS DMD
type: sections
max_columns: 4
sections:
  - type: grid
    column_span: 1
    cards:
      - type: heading
        heading: BMS 1
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Time : <b><font color=red>{{
              states('sensor.yambms_jk_bms_1_total_runtime_formatted') | upper
              }}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Error : <b><font color=red>{{
              states('sensor.yambms_jk_bms_1_errors')}}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 3
        cards:
          - type: markdown
            content: >-
              <center>Charge : <b>{% if
              states('binary_sensor.yambms_jk_bms_1_status_charging') == 'on' %}
              <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_1_status_charging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_1_status_charging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Discharge : <b> {% if
              states('binary_sensor.yambms_jk_bms_1_status_discharging') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_1_status_discharging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_1_status_discharging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Balance : <b> {% if
              states('binary_sensor.yambms_jk_bms_1_status_balancing') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_1_status_balancing') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_1_status_balancing') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_1_battery_voltage') }} V</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_1_battery_current') }} A</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_1_battery_power') }} W</font>
      - type: grid
        square: false
        columns: 2
        cards:
          - type: markdown
            content: >-
              <center><b><font size=4>BMS SoC :&nbsp;&nbsp;<font color=#41CD52
              size=4>{{
              states('sensor.yambms_jk_bms_1_battery_capacity_state_of_charge')
              }} %</font></font>
          - type: markdown
            content: >-
              <center><b><font size=4>Corrected SoC :&nbsp;&nbsp;<font
              color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_1_battery_soc') }} %</font></font> 
          - type: markdown
            content: >-
              <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('number.yambms_jk_bms_1_battery_capacity_total_setting') }}
              Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_battery_capacity_total_charging_cycle')
              }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
              color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_cell_average_voltage') }}
              V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_balancing_current') }} A</font><br>
              Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_max_temperature') }} °C</font>
          - type: markdown
            content: >-
              <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_battery_capacity_remaining') }}
              Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_charging_cycles') }}</font><br>
              Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_cell_delta_voltage') }}
              V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_temperature_powertube') }}
              °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_1_min_temperature') }} °C</font>
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change prefix to yours
            vars.bmsPrefixName = "yambms_jk_bms_1";
            vars.yamPrefixName = "yambms_yambms_1";
            // array of cell voltage entities
            vars.cellVoltageId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellVoltageId[i] = `sensor.${ vars.bmsPrefixName }_cell_voltage_${ (i < 10 ? '0' + i : i) }`; 
            }
            // voltage array
            vars.voltageArray = [];
            for (let i = 1; i <= 16; i++) {
              let entityState = hass.states[vars.cellVoltageId[i]].state;
              vars.voltageArray.push(parseFloat(entityState));
            }
            // local min max voltage of JK bms
            vars.minValue = Math.min(...vars.voltageArray);
            vars.maxValue = Math.max(...vars.voltageArray);
            // global min max voltage of all jk bms
            vars.minYamBmsVoltage = hass.states['sensor.yambms_yambms_1_min_cell_voltage'].state;
            vars.maxYamBmsVoltage = hass.states['sensor.yambms_yambms_1_max_cell_voltage'].state;

            vars.deltaThreshold = parseFloat(hass.states[`number.${ vars.bmsPrefixName }_balancing_trigger_voltage`].state);
            vars.delta = vars.maxValue - vars.minValue;
            vars.isDeltaBigger = (vars.delta > vars.deltaThreshold);
            
            vars.maxColor = "rgb(84, 144, 255)";
            vars.minColor = "red";
            vars.minY = Math.floor(vars.minYamBmsVoltage*10)/10-0.03
            vars.maxY = Math.ceil(vars.maxYamBmsVoltage*10)/10
            vars.barWidth = parseFloat(1505*60*60);
            vars.balanceVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_balancing_starting_voltage`].state;
            vars.floatVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_request_float_voltage`].state;
            vars.yamFloatVoltage = hass.states[`number.${ vars.yamPrefixName }_float_voltage`].state/16;
            vars.yamBulkVoltage = hass.states[`number.${ vars.yamPrefixName }_bulk_voltage`].state/16;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellVoltageId[1]
            offset: $ex {return (vars.barWidth+200)/100};
            filters:
              - map_y_numbers: vars.voltageArray[0]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[0] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[0] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[2]
            offset: $ex {return (vars.barWidth+200) * 1};
            filters:
              - map_y_numbers: vars.voltageArray[1]
            name: |
              $ex {
                return "cell2: " + vars.voltageArray[1];
              }
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[1] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[1] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[3]
            offset: $ex {return (vars.barWidth+200) * 2}
            filters:
              - map_y_numbers: vars.voltageArray[2]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[2] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[2] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[4]
            offset: $ex {return (vars.barWidth+200) * 3}
            filters:
              - map_y_numbers: vars.voltageArray[3]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[3] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[3] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[5]
            offset: $ex {return (vars.barWidth+200) * 4}
            filters:
              - map_y_numbers: vars.voltageArray[4]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[4] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[4] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[6]
            offset: $ex {return (vars.barWidth+200) * 5}
            filters:
              - map_y_numbers: vars.voltageArray[5]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[5] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[5] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[7]
            offset: $ex {return (vars.barWidth+200) * 6}
            filters:
              - map_y_numbers: vars.voltageArray[6]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[6] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[8]
            offset: $ex {return (vars.barWidth+200) * 7}
            filters:
              - map_y_numbers: vars.voltageArray[7]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[7] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[9]
            offset: $ex {return (vars.barWidth+200) * 8}
            filters:
              - map_y_numbers: vars.voltageArray[8]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[8] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[8] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[10]
            offset: $ex {return (vars.barWidth+200) * 9}
            filters:
              - map_y_numbers: vars.voltageArray[9]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[9] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[9] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[11]
            offset: $ex {return (vars.barWidth+200) * 10}
            filters:
              - map_y_numbers: vars.voltageArray[10]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[10] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[10] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[12]
            offset: $ex {return (vars.barWidth+200) * 11}
            filters:
              - map_y_numbers: vars.voltageArray[11]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[11] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[11] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[13]
            offset: $ex {return (vars.barWidth+200) * 12}
            filters:
              - map_y_numbers: vars.voltageArray[12]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[12] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[12] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[14]
            offset: $ex {return (vars.barWidth+200) * 13}
            filters:
              - map_y_numbers: vars.voltageArray[13]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[13] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[13] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[15]
            offset: $ex {return (vars.barWidth+200) * 14}
            filters:
              - map_y_numbers: vars.voltageArray[14]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[14] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[14] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[16]
            offset: $ex {return (vars.barWidth+200) * 15}
            filters:
              - map_y_numbers: vars.voltageArray[15]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[15] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[15] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: ""
            type: line
            name: Balance Start Voltage
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: SteelBlue
            x: $ex [0, 10000000000000]
            "y": $ex [vars.balanceVoltage, vars.balanceVoltage]
          - entity: ""
            type: line
            name: JK BMS RFV
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: gray
            x: $ex [0, 50]
            "y": $ex [vars.floatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Float
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: OliveDrab
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamFloatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Bulk
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: orangered
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamBulkVoltage, 0]
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          annotations:
            - x: null
              "y": $ex vars.yamBulkVoltage+0.004
              text: $ex "Yam Bulk " + vars.yamBulkVoltage.toFixed(3)+"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex vars.yamFloatVoltage+0.004
              text: $ex "Yam Float " + vars.yamFloatVoltage +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.balanceVoltage)+0.004
              text: >-
                $ex "JK Balanse " + parseFloat(vars.balanceVoltage).toFixed(3)
                +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.floatVoltage)+0.004
              text: $ex "JK Float " + parseFloat(vars.floatVoltage).toFixed(3) +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
          showlegend: false
          height: 200
          xaxis:
            nticks: 1
            showticklabels: false
          yaxis:
            gridcolor: rgba(100,100,100,0.2)
            nticks: 4
            visible: false
            range:
              - $ex {return vars.minY}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change to yours
            vars.bmsPrefixName = "yambms_jk_bms_1";
            const bmsIds = [1, 2, 3, 4]; // array of JK bms IDs
            vars.yamPrefixName = "yambms_yambms_1";
            
            // array of cell voltage entities
            vars.cellResistanceId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellResistanceId[i] = `sensor.${ vars.bmsPrefixName }_cell_resistance_${ (i < 10 ? '0' + i : i) }`; 
            }
            // Initialize array for resistance values
            vars.resistanceArray = [];
            for (let i = 1; i <= 16; i++) {

              let entityState = hass.states[vars.cellResistanceId[i]].state;
              vars.resistanceArray[i] = (parseFloat(entityState));
            }
            
            // Get min/max values
            vars.minValue = Math.min(...vars.resistanceArray);
            vars.maxValue = Math.max(...vars.resistanceArray);
            
            
            vars.minYamBmsResistance = Math.min(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_min`]?.state || 0)
            ));
            
            vars.maxYamBmsResistance = Math.max(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_max`]?.state || 0)
            )); 
            
            // Define 16 color stops from OrangeRed to RoyalBlue
            vars.colorStops = [
              { value: 0, color: 'rgb(65,105,225)' },      // RoyalBlue
              { value: 0.067, color: 'rgb(85,115,220)' },
              { value: 0.133, color: 'rgb(105,125,215)' },
              { value: 0.2, color: 'rgb(125,135,210)' },
              { value: 0.267, color: 'rgb(145,145,205)' },
              { value: 0.333, color: 'rgb(165,155,200)' },
              { value: 0.4, color: 'rgb(185,165,195)' },
              { value: 0.467, color: 'rgb(205,175,190)' },
              { value: 0.533, color: 'rgb(225,185,185)' },
              { value: 0.6, color: 'rgb(245,195,180)' },
              { value: 0.667, color: 'rgb(255,175,150)' },
              { value: 0.733, color: 'rgb(255,155,120)' },
              { value: 0.8, color: 'rgb(255,135,90)' },
              { value: 0.867, color: 'rgb(255,115,60)' },
              { value: 0.933, color: 'rgb(255,95,30)' },
              { value: 1, color: 'rgb(255,69,0)' }        // OrangeRed
            ];
            
            vars.getColor = (value) => {
              const maxValue = vars.maxYamBmsResistance;
              const minValue = vars.minYamBmsResistance;

              // relativePosition from 0 to 1
              const relativePosition = (value - minValue) / (maxValue - minValue);

              let closestStop = vars.colorStops[0]; 
              vars.colorStops.forEach(stop => {
                  if (Math.abs(stop.value - relativePosition) < Math.abs(closestStop.value - relativePosition)) {
                      closestStop = stop;
                  }
              });

              return closestStop.color;
            };
            
            vars.barWidth = parseFloat(1505*60*60);
            vars.minY = Math.floor(vars.minYamBmsResistance*100)/100;
            vars.maxY = Math.ceil(vars.maxYamBmsResistance*1000)/1000;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellResistanceId[1]
            offset: $ex {return (vars.barWidth)/100};
            filters:
              - map_y_numbers: vars.resistanceArray[1]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[1])}
          - entity: $ex vars.cellResistanceId[2]
            offset: $ex {return (vars.barWidth) * (2-1)};
            filters:
              - map_y_numbers: vars.resistanceArray[2]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[2])}
          - entity: $ex vars.cellResistanceId[3]
            offset: $ex {return (vars.barWidth) * (3-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[3]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[3])}
          - entity: $ex vars.cellResistanceId[4]
            offset: $ex {return (vars.barWidth) * (4-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[4]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[4])}
          - entity: $ex vars.cellResistanceId[5]
            offset: $ex {return (vars.barWidth) * (5-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[5]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[5])}
          - entity: $ex vars.cellResistanceId[6]
            offset: $ex {return (vars.barWidth) * (6-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[6]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[6])}
          - entity: $ex vars.cellResistanceId[7]
            offset: $ex {return (vars.barWidth) * (7-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[7]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[7])}
          - entity: $ex vars.cellResistanceId[8]
            offset: $ex {return (vars.barWidth) * (8-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[8]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[8])}
          - entity: $ex vars.cellResistanceId[9]
            offset: $ex {return (vars.barWidth) * (9-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[9]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[9])}
          - entity: $ex vars.cellResistanceId[10]
            offset: $ex {return (vars.barWidth) * (10-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[10]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[10])}
          - entity: $ex vars.cellResistanceId[11]
            offset: $ex {return (vars.barWidth) * (11-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[11]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[11])}
          - entity: $ex vars.cellResistanceId[12]
            offset: $ex {return (vars.barWidth) * (12-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[12]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[12])}
          - entity: $ex vars.cellResistanceId[13]
            offset: $ex {return (vars.barWidth) * (13-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[13]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[13])}
          - entity: $ex vars.cellResistanceId[14]
            offset: $ex {return (vars.barWidth) * (14-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[14]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[14])}
          - entity: $ex vars.cellResistanceId[15]
            offset: $ex {return (vars.barWidth) * (15-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[15]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[15])}
          - entity: $ex vars.cellResistanceId[16]
            offset: $ex {return (vars.barWidth) * (16-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[16]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[16])}
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          showlegend: false
          height: 97
          xaxis:
            nticks: 1
            showticklabels: false
            fixedrange: true
          yaxis:
            visible: false
            fixedrange: true
            range:
              - $ex {return vars.minY-0.0035}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_1_enable_bluetooth_connection
            name: Bluetooth
          - entity: binary_sensor.yambms_jk_bms_1_status_online
            name: Online ?
          - entity: binary_sensor.yambms_jk_bms_1_can_be_combined
            name: Can be combined
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_1_charging
            name: Charge
          - entity: switch.yambms_jk_bms_1_discharging
            name: Discharge
          - entity: switch.yambms_jk_bms_1_balancing
            name: Balance
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
  - type: grid
    column_span: 1
    cards:
      - type: heading
        heading: BMS 2
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Time : <b><font color=red>{{
              states('sensor.yambms_jk_bms_2_total_runtime_formatted') | upper
              }}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Error : <b><font color=red>{{
              states('sensor.yambms_jk_bms_2_errors')}}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 3
        cards:
          - type: markdown
            content: >-
              <center>Charge : <b>{% if
              states('binary_sensor.yambms_jk_bms_2_status_charging') == 'on' %}
              <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_2_status_charging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_2_status_charging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Discharge : <b> {% if
              states('binary_sensor.yambms_jk_bms_2_status_discharging') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_2_status_discharging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_2_status_discharging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Balance : <b> {% if
              states('binary_sensor.yambms_jk_bms_2_status_balancing') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_2_status_balancing') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_2_status_balancing') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_2_battery_voltage') }} V</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_2_battery_current') }} A</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_2_battery_power') }} W</font>
      - type: grid
        square: false
        columns: 2
        cards:
          - type: markdown
            content: >-
              <center><b><font size=4>BMS SoC :&nbsp;&nbsp;<font color=#41CD52
              size=4>{{
              states('sensor.yambms_jk_bms_2_battery_capacity_state_of_charge')
              }} %</font></font>
          - type: markdown
            content: >-
              <center><b><font size=4>Corrected SoC :&nbsp;&nbsp;<font
              color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_2_battery_soc') }} %</font></font> 
          - type: markdown
            content: >-
              <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('number.yambms_jk_bms_2_battery_capacity_total_setting') }}
              Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_battery_capacity_total_charging_cycle')
              }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
              color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_cell_average_voltage') }}
              V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_balancing_current') }} A</font><br>
              Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_max_temperature') }} °C</font>
          - type: markdown
            content: >-
              <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_battery_capacity_remaining') }}
              Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_charging_cycles') }}</font><br>
              Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_cell_delta_voltage') }}
              V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_temperature_powertube') }}
              °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_2_min_temperature') }} °C</font>
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change prefix to yours
            vars.bmsPrefixName = "yambms_jk_bms_2";
            vars.yamPrefixName = "yambms_yambms_1";
            // array of cell voltage entities
            vars.cellVoltageId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellVoltageId[i] = `sensor.${ vars.bmsPrefixName }_cell_voltage_${ (i < 10 ? '0' + i : i) }`; 
            }
            // voltage array
            vars.voltageArray = [];
            for (let i = 1; i <= 16; i++) {
              let entityState = hass.states[vars.cellVoltageId[i]].state;
              vars.voltageArray.push(parseFloat(entityState));
            }
            // local min max voltage of JK bms
            vars.minValue = Math.min(...vars.voltageArray);
            vars.maxValue = Math.max(...vars.voltageArray);
            // global min max voltage of all jk bms
            vars.minYamBmsVoltage = hass.states['sensor.yambms_yambms_1_min_cell_voltage'].state;
            vars.maxYamBmsVoltage = hass.states['sensor.yambms_yambms_1_max_cell_voltage'].state;

            vars.deltaThreshold = parseFloat(hass.states[`number.${ vars.bmsPrefixName }_balancing_trigger_voltage`].state);
            vars.delta = vars.maxValue - vars.minValue;
            vars.isDeltaBigger = (vars.delta > vars.deltaThreshold);
            
            vars.maxColor = "rgb(84, 144, 255)";
            vars.minColor = "red";
            vars.minY = Math.floor(vars.minYamBmsVoltage*10)/10-0.03
            vars.maxY = Math.ceil(vars.maxYamBmsVoltage*10)/10
            vars.barWidth = parseFloat(1505*60*60);
            vars.balanceVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_balancing_starting_voltage`].state;
            vars.floatVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_request_float_voltage`].state;
            vars.yamFloatVoltage = hass.states[`number.${ vars.yamPrefixName }_float_voltage`].state/16;
            vars.yamBulkVoltage = hass.states[`number.${ vars.yamPrefixName }_bulk_voltage`].state/16;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellVoltageId[1]
            offset: $ex {return (vars.barWidth+200)/100};
            filters:
              - map_y_numbers: vars.voltageArray[0]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[0] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[0] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[2]
            offset: $ex {return (vars.barWidth+200) * 1};
            filters:
              - map_y_numbers: vars.voltageArray[1]
            name: |
              $ex {
                return "cell2: " + vars.voltageArray[1];
              }
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[1] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[1] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[3]
            offset: $ex {return (vars.barWidth+200) * 2}
            filters:
              - map_y_numbers: vars.voltageArray[2]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[2] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[2] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[4]
            offset: $ex {return (vars.barWidth+200) * 3}
            filters:
              - map_y_numbers: vars.voltageArray[3]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[3] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[3] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[5]
            offset: $ex {return (vars.barWidth+200) * 4}
            filters:
              - map_y_numbers: vars.voltageArray[4]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[4] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[4] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[6]
            offset: $ex {return (vars.barWidth+200) * 5}
            filters:
              - map_y_numbers: vars.voltageArray[5]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[5] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[5] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[7]
            offset: $ex {return (vars.barWidth+200) * 6}
            filters:
              - map_y_numbers: vars.voltageArray[6]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[6] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[8]
            offset: $ex {return (vars.barWidth+200) * 7}
            filters:
              - map_y_numbers: vars.voltageArray[7]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[7] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[9]
            offset: $ex {return (vars.barWidth+200) * 8}
            filters:
              - map_y_numbers: vars.voltageArray[8]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[8] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[8] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[10]
            offset: $ex {return (vars.barWidth+200) * 9}
            filters:
              - map_y_numbers: vars.voltageArray[9]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[9] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[9] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[11]
            offset: $ex {return (vars.barWidth+200) * 10}
            filters:
              - map_y_numbers: vars.voltageArray[10]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[10] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[10] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[12]
            offset: $ex {return (vars.barWidth+200) * 11}
            filters:
              - map_y_numbers: vars.voltageArray[11]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[11] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[11] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[13]
            offset: $ex {return (vars.barWidth+200) * 12}
            filters:
              - map_y_numbers: vars.voltageArray[12]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[12] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[12] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[14]
            offset: $ex {return (vars.barWidth+200) * 13}
            filters:
              - map_y_numbers: vars.voltageArray[13]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[13] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[13] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[15]
            offset: $ex {return (vars.barWidth+200) * 14}
            filters:
              - map_y_numbers: vars.voltageArray[14]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[14] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[14] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[16]
            offset: $ex {return (vars.barWidth+200) * 15}
            filters:
              - map_y_numbers: vars.voltageArray[15]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[15] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[15] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: ""
            type: line
            name: Balance Start Voltage
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: SteelBlue
            x: $ex [0, 10000000000000]
            "y": $ex [vars.balanceVoltage, vars.balanceVoltage]
          - entity: ""
            type: line
            name: JK BMS RFV
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: gray
            x: $ex [0, 50]
            "y": $ex [vars.floatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Float
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: OliveDrab
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamFloatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Bulk
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: orangered
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamBulkVoltage, 0]
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          annotations:
            - x: null
              "y": $ex vars.yamBulkVoltage+0.004
              text: $ex "Yam Bulk " + vars.yamBulkVoltage.toFixed(3)+"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex vars.yamFloatVoltage+0.004
              text: $ex "Yam Float " + vars.yamFloatVoltage +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.balanceVoltage)+0.004
              text: >-
                $ex "JK Balanse " + parseFloat(vars.balanceVoltage).toFixed(3)
                +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.floatVoltage)+0.004
              text: $ex "JK Float " + parseFloat(vars.floatVoltage).toFixed(3) +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
          showlegend: false
          height: 200
          xaxis:
            nticks: 1
            showticklabels: false
          yaxis:
            gridcolor: rgba(100,100,100,0.2)
            nticks: 4
            visible: false
            range:
              - $ex {return vars.minY}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change to yours
            vars.bmsPrefixName = "yambms_jk_bms_2";
            const bmsIds = [1, 2, 3, 4]; // array of JK bms IDs
            vars.yamPrefixName = "yambms_yambms_1";
            
            // array of cell voltage entities
            vars.cellResistanceId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellResistanceId[i] = `sensor.${ vars.bmsPrefixName }_cell_resistance_${ (i < 10 ? '0' + i : i) }`; 
            }
            // Initialize array for resistance values
            vars.resistanceArray = [];
            for (let i = 1; i <= 16; i++) {

              let entityState = hass.states[vars.cellResistanceId[i]].state;
              vars.resistanceArray[i] = (parseFloat(entityState));
            }
            
            // Get min/max values
            vars.minValue = Math.min(...vars.resistanceArray);
            vars.maxValue = Math.max(...vars.resistanceArray);
            
            
            vars.minYamBmsResistance = Math.min(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_min`]?.state || 0)
            ));
            
            vars.maxYamBmsResistance = Math.max(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_max`]?.state || 0)
            )); 
            
            // Define 16 color stops from OrangeRed to RoyalBlue
            vars.colorStops = [
              { value: 0, color: 'rgb(65,105,225)' },      // RoyalBlue
              { value: 0.067, color: 'rgb(85,115,220)' },
              { value: 0.133, color: 'rgb(105,125,215)' },
              { value: 0.2, color: 'rgb(125,135,210)' },
              { value: 0.267, color: 'rgb(145,145,205)' },
              { value: 0.333, color: 'rgb(165,155,200)' },
              { value: 0.4, color: 'rgb(185,165,195)' },
              { value: 0.467, color: 'rgb(205,175,190)' },
              { value: 0.533, color: 'rgb(225,185,185)' },
              { value: 0.6, color: 'rgb(245,195,180)' },
              { value: 0.667, color: 'rgb(255,175,150)' },
              { value: 0.733, color: 'rgb(255,155,120)' },
              { value: 0.8, color: 'rgb(255,135,90)' },
              { value: 0.867, color: 'rgb(255,115,60)' },
              { value: 0.933, color: 'rgb(255,95,30)' },
              { value: 1, color: 'rgb(255,69,0)' }        // OrangeRed
            ];
            
            vars.getColor = (value) => {
              const maxValue = vars.maxYamBmsResistance;
              const minValue = vars.minYamBmsResistance;

              // relativePosition from 0 to 1
              const relativePosition = (value - minValue) / (maxValue - minValue);

              let closestStop = vars.colorStops[0]; 
              vars.colorStops.forEach(stop => {
                  if (Math.abs(stop.value - relativePosition) < Math.abs(closestStop.value - relativePosition)) {
                      closestStop = stop;
                  }
              });

              return closestStop.color;
            };
            
            vars.barWidth = parseFloat(1505*60*60);
            vars.minY = Math.floor(vars.minYamBmsResistance*100)/100;
            vars.maxY = Math.ceil(vars.maxYamBmsResistance*1000)/1000;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellResistanceId[1]
            offset: $ex {return (vars.barWidth)/100};
            filters:
              - map_y_numbers: vars.resistanceArray[1]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[1])}
          - entity: $ex vars.cellResistanceId[2]
            offset: $ex {return (vars.barWidth) * (2-1)};
            filters:
              - map_y_numbers: vars.resistanceArray[2]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[2])}
          - entity: $ex vars.cellResistanceId[3]
            offset: $ex {return (vars.barWidth) * (3-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[3]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[3])}
          - entity: $ex vars.cellResistanceId[4]
            offset: $ex {return (vars.barWidth) * (4-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[4]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[4])}
          - entity: $ex vars.cellResistanceId[5]
            offset: $ex {return (vars.barWidth) * (5-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[5]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[5])}
          - entity: $ex vars.cellResistanceId[6]
            offset: $ex {return (vars.barWidth) * (6-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[6]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[6])}
          - entity: $ex vars.cellResistanceId[7]
            offset: $ex {return (vars.barWidth) * (7-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[7]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[7])}
          - entity: $ex vars.cellResistanceId[8]
            offset: $ex {return (vars.barWidth) * (8-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[8]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[8])}
          - entity: $ex vars.cellResistanceId[9]
            offset: $ex {return (vars.barWidth) * (9-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[9]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[9])}
          - entity: $ex vars.cellResistanceId[10]
            offset: $ex {return (vars.barWidth) * (10-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[10]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[10])}
          - entity: $ex vars.cellResistanceId[11]
            offset: $ex {return (vars.barWidth) * (11-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[11]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[11])}
          - entity: $ex vars.cellResistanceId[12]
            offset: $ex {return (vars.barWidth) * (12-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[12]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[12])}
          - entity: $ex vars.cellResistanceId[13]
            offset: $ex {return (vars.barWidth) * (13-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[13]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[13])}
          - entity: $ex vars.cellResistanceId[14]
            offset: $ex {return (vars.barWidth) * (14-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[14]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[14])}
          - entity: $ex vars.cellResistanceId[15]
            offset: $ex {return (vars.barWidth) * (15-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[15]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[15])}
          - entity: $ex vars.cellResistanceId[16]
            offset: $ex {return (vars.barWidth) * (16-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[16]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[16])}
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          showlegend: false
          height: 97
          xaxis:
            nticks: 1
            showticklabels: false
            fixedrange: true
          yaxis:
            visible: false
            fixedrange: true
            range:
              - $ex {return vars.minY-0.0035}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_2_enable_bluetooth_connection
            name: Bluetooth
          - entity: binary_sensor.yambms_jk_bms_2_status_online
            name: Online ?
          - entity: binary_sensor.yambms_jk_bms_2_can_be_combined
            name: Can be combined
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_2_charging
            name: Charge
          - entity: switch.yambms_jk_bms_2_discharging
            name: Discharge
          - entity: switch.yambms_jk_bms_2_balancing
            name: Balance
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
  - type: grid
    column_span: 1
    cards:
      - type: heading
        heading: BMS 3
        heading_style: title
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Time : <b><font color=red>{{
              states('sensor.yambms_jk_bms_3_total_runtime_formatted') | upper
              }}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Error : <b><font color=red>{{
              states('sensor.yambms_jk_bms_3_errors')}}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 3
        cards:
          - type: markdown
            content: >-
              <center>Charge : <b>{% if
              states('binary_sensor.yambms_jk_bms_3_status_charging') == 'on' %}
              <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_3_status_charging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_3_status_charging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Discharge : <b> {% if
              states('binary_sensor.yambms_jk_bms_3_status_discharging') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_3_status_discharging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_3_status_discharging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Balance : <b> {% if
              states('binary_sensor.yambms_jk_bms_3_status_balancing') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_3_status_balancing') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_3_status_balancing') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_3_battery_voltage') }} V</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_3_battery_current') }} A</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_3_battery_power') }} W</font>
      - type: grid
        square: false
        columns: 2
        cards:
          - type: markdown
            content: >-
              <center><b><font size=4>BMS SoC :&nbsp;&nbsp;<font color=#41CD52
              size=4>{{
              states('sensor.yambms_jk_bms_3_battery_capacity_state_of_charge')
              }} %</font></font>
          - type: markdown
            content: >-
              <center><b><font size=4>Corrected SoC :&nbsp;&nbsp;<font
              color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_3_battery_soc') }} %</font></font> 
          - type: markdown
            content: >-
              <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('number.yambms_jk_bms_3_battery_capacity_total_setting') }}
              Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_battery_capacity_total_charging_cycle')
              }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
              color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_cell_average_voltage') }}
              V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_balancing_current') }} A</font><br>
              Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_max_temperature') }} °C</font>
          - type: markdown
            content: >-
              <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_battery_capacity_remaining') }}
              Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_charging_cycles') }}</font><br>
              Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_cell_delta_voltage') }}
              V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_temperature_powertube') }}
              °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_3_min_temperature') }} °C</font>
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change prefix to yours
            vars.bmsPrefixName = "yambms_jk_bms_3";
            vars.yamPrefixName = "yambms_yambms_1";
            // array of cell voltage entities
            vars.cellVoltageId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellVoltageId[i] = `sensor.${ vars.bmsPrefixName }_cell_voltage_${ (i < 10 ? '0' + i : i) }`; 
            }
            // voltage array
            vars.voltageArray = [];
            for (let i = 1; i <= 16; i++) {
              let entityState = hass.states[vars.cellVoltageId[i]].state;
              vars.voltageArray.push(parseFloat(entityState));
            }
            // local min max voltage of JK bms
            vars.minValue = Math.min(...vars.voltageArray);
            vars.maxValue = Math.max(...vars.voltageArray);
            // global min max voltage of all jk bms
            vars.minYamBmsVoltage = hass.states['sensor.yambms_yambms_1_min_cell_voltage'].state;
            vars.maxYamBmsVoltage = hass.states['sensor.yambms_yambms_1_max_cell_voltage'].state;

            vars.deltaThreshold = parseFloat(hass.states[`number.${ vars.bmsPrefixName }_balancing_trigger_voltage`].state);
            vars.delta = vars.maxValue - vars.minValue;
            vars.isDeltaBigger = (vars.delta > vars.deltaThreshold);
            
            vars.maxColor = "rgb(84, 144, 255)";
            vars.minColor = "red";
            vars.minY = Math.floor(vars.minYamBmsVoltage*10)/10-0.03
            vars.maxY = Math.ceil(vars.maxYamBmsVoltage*10)/10
            vars.barWidth = parseFloat(1505*60*60);
            vars.balanceVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_balancing_starting_voltage`].state;
            vars.floatVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_request_float_voltage`].state;
            vars.yamFloatVoltage = hass.states[`number.${ vars.yamPrefixName }_float_voltage`].state/16;
            vars.yamBulkVoltage = hass.states[`number.${ vars.yamPrefixName }_bulk_voltage`].state/16;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellVoltageId[1]
            offset: $ex {return (vars.barWidth+200)/100};
            filters:
              - map_y_numbers: vars.voltageArray[0]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[0] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[0] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[2]
            offset: $ex {return (vars.barWidth+200) * 1};
            filters:
              - map_y_numbers: vars.voltageArray[1]
            name: |
              $ex {
                return "cell2: " + vars.voltageArray[1];
              }
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[1] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[1] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[3]
            offset: $ex {return (vars.barWidth+200) * 2}
            filters:
              - map_y_numbers: vars.voltageArray[2]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[2] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[2] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[4]
            offset: $ex {return (vars.barWidth+200) * 3}
            filters:
              - map_y_numbers: vars.voltageArray[3]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[3] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[3] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[5]
            offset: $ex {return (vars.barWidth+200) * 4}
            filters:
              - map_y_numbers: vars.voltageArray[4]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[4] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[4] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[6]
            offset: $ex {return (vars.barWidth+200) * 5}
            filters:
              - map_y_numbers: vars.voltageArray[5]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[5] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[5] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[7]
            offset: $ex {return (vars.barWidth+200) * 6}
            filters:
              - map_y_numbers: vars.voltageArray[6]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[6] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[8]
            offset: $ex {return (vars.barWidth+200) * 7}
            filters:
              - map_y_numbers: vars.voltageArray[7]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[7] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[9]
            offset: $ex {return (vars.barWidth+200) * 8}
            filters:
              - map_y_numbers: vars.voltageArray[8]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[8] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[8] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[10]
            offset: $ex {return (vars.barWidth+200) * 9}
            filters:
              - map_y_numbers: vars.voltageArray[9]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[9] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[9] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[11]
            offset: $ex {return (vars.barWidth+200) * 10}
            filters:
              - map_y_numbers: vars.voltageArray[10]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[10] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[10] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[12]
            offset: $ex {return (vars.barWidth+200) * 11}
            filters:
              - map_y_numbers: vars.voltageArray[11]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[11] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[11] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[13]
            offset: $ex {return (vars.barWidth+200) * 12}
            filters:
              - map_y_numbers: vars.voltageArray[12]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[12] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[12] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[14]
            offset: $ex {return (vars.barWidth+200) * 13}
            filters:
              - map_y_numbers: vars.voltageArray[13]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[13] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[13] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[15]
            offset: $ex {return (vars.barWidth+200) * 14}
            filters:
              - map_y_numbers: vars.voltageArray[14]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[14] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[14] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[16]
            offset: $ex {return (vars.barWidth+200) * 15}
            filters:
              - map_y_numbers: vars.voltageArray[15]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[15] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[15] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: ""
            type: line
            name: Balance Start Voltage
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: SteelBlue
            x: $ex [0, 10000000000000]
            "y": $ex [vars.balanceVoltage, vars.balanceVoltage]
          - entity: ""
            type: line
            name: JK BMS RFV
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: gray
            x: $ex [0, 50]
            "y": $ex [vars.floatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Float
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: OliveDrab
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamFloatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Bulk
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: orangered
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamBulkVoltage, 0]
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          annotations:
            - x: null
              "y": $ex vars.yamBulkVoltage+0.004
              text: $ex "Yam Bulk " + vars.yamBulkVoltage.toFixed(3)+"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex vars.yamFloatVoltage+0.004
              text: $ex "Yam Float " + vars.yamFloatVoltage +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.balanceVoltage)+0.004
              text: >-
                $ex "JK Balanse " + parseFloat(vars.balanceVoltage).toFixed(3)
                +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.floatVoltage)+0.004
              text: $ex "JK Float " + parseFloat(vars.floatVoltage).toFixed(3) +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
          showlegend: false
          height: 200
          xaxis:
            nticks: 1
            showticklabels: false
          yaxis:
            gridcolor: rgba(100,100,100,0.2)
            nticks: 4
            visible: false
            range:
              - $ex {return vars.minY}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change to yours
            vars.bmsPrefixName = "yambms_jk_bms_3";
            const bmsIds = [1, 2, 3, 4]; // array of JK bms IDs
            vars.yamPrefixName = "yambms_yambms_1";
            
            // array of cell voltage entities
            vars.cellResistanceId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellResistanceId[i] = `sensor.${ vars.bmsPrefixName }_cell_resistance_${ (i < 10 ? '0' + i : i) }`; 
            }
            // Initialize array for resistance values
            vars.resistanceArray = [];
            for (let i = 1; i <= 16; i++) {

              let entityState = hass.states[vars.cellResistanceId[i]].state;
              vars.resistanceArray[i] = (parseFloat(entityState));
            }
            
            // Get min/max values
            vars.minValue = Math.min(...vars.resistanceArray);
            vars.maxValue = Math.max(...vars.resistanceArray);
            
            
            vars.minYamBmsResistance = Math.min(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_min`]?.state || 0)
            ));
            
            vars.maxYamBmsResistance = Math.max(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_max`]?.state || 0)
            )); 
            
            // Define 16 color stops from OrangeRed to RoyalBlue
            vars.colorStops = [
              { value: 0, color: 'rgb(65,105,225)' },      // RoyalBlue
              { value: 0.067, color: 'rgb(85,115,220)' },
              { value: 0.133, color: 'rgb(105,125,215)' },
              { value: 0.2, color: 'rgb(125,135,210)' },
              { value: 0.267, color: 'rgb(145,145,205)' },
              { value: 0.333, color: 'rgb(165,155,200)' },
              { value: 0.4, color: 'rgb(185,165,195)' },
              { value: 0.467, color: 'rgb(205,175,190)' },
              { value: 0.533, color: 'rgb(225,185,185)' },
              { value: 0.6, color: 'rgb(245,195,180)' },
              { value: 0.667, color: 'rgb(255,175,150)' },
              { value: 0.733, color: 'rgb(255,155,120)' },
              { value: 0.8, color: 'rgb(255,135,90)' },
              { value: 0.867, color: 'rgb(255,115,60)' },
              { value: 0.933, color: 'rgb(255,95,30)' },
              { value: 1, color: 'rgb(255,69,0)' }        // OrangeRed
            ];
            
            vars.getColor = (value) => {
              const maxValue = vars.maxYamBmsResistance;
              const minValue = vars.minYamBmsResistance;

              // relativePosition from 0 to 1
              const relativePosition = (value - minValue) / (maxValue - minValue);

              let closestStop = vars.colorStops[0]; 
              vars.colorStops.forEach(stop => {
                  if (Math.abs(stop.value - relativePosition) < Math.abs(closestStop.value - relativePosition)) {
                      closestStop = stop;
                  }
              });

              return closestStop.color;
            };
            
            vars.barWidth = parseFloat(1505*60*60);
            vars.minY = Math.floor(vars.minYamBmsResistance*100)/100;
            vars.maxY = Math.ceil(vars.maxYamBmsResistance*1000)/1000;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellResistanceId[1]
            offset: $ex {return (vars.barWidth)/100};
            filters:
              - map_y_numbers: vars.resistanceArray[1]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[1])}
          - entity: $ex vars.cellResistanceId[2]
            offset: $ex {return (vars.barWidth) * (2-1)};
            filters:
              - map_y_numbers: vars.resistanceArray[2]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[2])}
          - entity: $ex vars.cellResistanceId[3]
            offset: $ex {return (vars.barWidth) * (3-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[3]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[3])}
          - entity: $ex vars.cellResistanceId[4]
            offset: $ex {return (vars.barWidth) * (4-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[4]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[4])}
          - entity: $ex vars.cellResistanceId[5]
            offset: $ex {return (vars.barWidth) * (5-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[5]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[5])}
          - entity: $ex vars.cellResistanceId[6]
            offset: $ex {return (vars.barWidth) * (6-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[6]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[6])}
          - entity: $ex vars.cellResistanceId[7]
            offset: $ex {return (vars.barWidth) * (7-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[7]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[7])}
          - entity: $ex vars.cellResistanceId[8]
            offset: $ex {return (vars.barWidth) * (8-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[8]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[8])}
          - entity: $ex vars.cellResistanceId[9]
            offset: $ex {return (vars.barWidth) * (9-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[9]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[9])}
          - entity: $ex vars.cellResistanceId[10]
            offset: $ex {return (vars.barWidth) * (10-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[10]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[10])}
          - entity: $ex vars.cellResistanceId[11]
            offset: $ex {return (vars.barWidth) * (11-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[11]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[11])}
          - entity: $ex vars.cellResistanceId[12]
            offset: $ex {return (vars.barWidth) * (12-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[12]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[12])}
          - entity: $ex vars.cellResistanceId[13]
            offset: $ex {return (vars.barWidth) * (13-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[13]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[13])}
          - entity: $ex vars.cellResistanceId[14]
            offset: $ex {return (vars.barWidth) * (14-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[14]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[14])}
          - entity: $ex vars.cellResistanceId[15]
            offset: $ex {return (vars.barWidth) * (15-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[15]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[15])}
          - entity: $ex vars.cellResistanceId[16]
            offset: $ex {return (vars.barWidth) * (16-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[16]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[16])}
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          showlegend: false
          height: 97
          xaxis:
            nticks: 1
            showticklabels: false
            fixedrange: true
          yaxis:
            visible: false
            fixedrange: true
            range:
              - $ex {return vars.minY-0.0035}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_3_enable_bluetooth_connection
            name: Bluetooth
          - entity: binary_sensor.yambms_jk_bms_3_status_online
            name: Online ?
          - entity: binary_sensor.yambms_jk_bms_3_can_be_combined
            name: Can be combined
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_3_charging
            name: Charge
          - entity: switch.yambms_jk_bms_3_discharging
            name: Discharge
          - entity: switch.yambms_jk_bms_3_balancing
            name: Balance
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
  - type: grid
    column_span: 1
    cards:
      - type: heading
        heading: BMS 4
        heading_style: title
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Time : <b><font color=red>{{
              states('sensor.yambms_jk_bms_4_total_runtime_formatted') | upper
              }}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 1
        cards:
          - type: markdown
            content: >-
              <center>Error : <b><font color=red>{{
              states('sensor.yambms_jk_bms_4_errors')}}</font>
        layout_options:
          grid_columns: 2
          grid_rows: 1
      - type: grid
        square: false
        columns: 3
        cards:
          - type: markdown
            content: >-
              <center>Charge : <b>{% if
              states('binary_sensor.yambms_jk_bms_4_status_charging') == 'on' %}
              <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_4_status_charging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_4_status_charging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Discharge : <b> {% if
              states('binary_sensor.yambms_jk_bms_4_status_discharging') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_4_status_discharging') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_4_status_discharging') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center>Balance : <b> {% if
              states('binary_sensor.yambms_jk_bms_4_status_balancing') == 'on'
              %} <font color=#41CD52>{{
              states('binary_sensor.yambms_jk_bms_4_status_balancing') | upper
              }}</font> {% else %} <font color=#3090C7>{{
              states('binary_sensor.yambms_jk_bms_4_status_balancing') | upper
              }}</font> {% endif %}
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_4_battery_voltage') }} V</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_4_battery_current') }} A</font></b>
          - type: markdown
            content: >-
              <center><b><font color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_4_battery_power') }} W</font>
      - type: grid
        square: false
        columns: 2
        cards:
          - type: markdown
            content: >-
              <center><b><font size=4>BMS SoC :&nbsp;&nbsp;<font color=#41CD52
              size=4>{{
              states('sensor.yambms_jk_bms_4_battery_capacity_state_of_charge')
              }} %</font></font>
          - type: markdown
            content: >-
              <center><b><font size=4>Corrected SoC :&nbsp;&nbsp;<font
              color=#41CD52 size=4>{{
              states('sensor.yambms_jk_bms_4_battery_soc') }} %</font></font> 
          - type: markdown
            content: >-
              <center> Battery Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('number.yambms_jk_bms_4_battery_capacity_total_setting') }}
              Ah</font><br> Cycle Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_battery_capacity_total_charging_cycle')
              }} Ah</font><br> Ave. Cell Vol. :&nbsp;&nbsp;<font
              color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_cell_average_voltage') }}
              V</font><br> Balance Cur. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_balancing_current') }} A</font><br>
              Max temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_max_temperature') }} °C</font>
          - type: markdown
            content: >-
              <center> Remain Capacity :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_battery_capacity_remaining') }}
              Ah</font><br> Cycle Count :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_charging_cycles') }}</font><br>
              Delta Cell Vol. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_cell_delta_voltage') }}
              V</font><br> MOS temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_temperature_powertube') }}
              °C</font><br> Min temp. :&nbsp;&nbsp;<font color=#41CD52>{{
              states('sensor.yambms_jk_bms_4_min_temperature') }} °C</font>
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change prefix to yours
            vars.bmsPrefixName = "yambms_jk_bms_4";
            vars.yamPrefixName = "yambms_yambms_1";
            // array of cell voltage entities
            vars.cellVoltageId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellVoltageId[i] = `sensor.${ vars.bmsPrefixName }_cell_voltage_${ (i < 10 ? '0' + i : i) }`; 
            }
            // voltage array
            vars.voltageArray = [];
            for (let i = 1; i <= 16; i++) {
              let entityState = hass.states[vars.cellVoltageId[i]].state;
              vars.voltageArray.push(parseFloat(entityState));
            }
            // local min max voltage of JK bms
            vars.minValue = Math.min(...vars.voltageArray);
            vars.maxValue = Math.max(...vars.voltageArray);
            // global min max voltage of all jk bms
            vars.minYamBmsVoltage = hass.states['sensor.yambms_yambms_1_min_cell_voltage'].state;
            vars.maxYamBmsVoltage = hass.states['sensor.yambms_yambms_1_max_cell_voltage'].state;

            vars.deltaThreshold = parseFloat(hass.states[`number.${ vars.bmsPrefixName }_balancing_trigger_voltage`].state);
            vars.delta = vars.maxValue - vars.minValue;
            vars.isDeltaBigger = (vars.delta > vars.deltaThreshold);
            
            vars.maxColor = "rgb(84, 144, 255)";
            vars.minColor = "red";
            vars.minY = Math.floor(vars.minYamBmsVoltage*10)/10-0.03
            vars.maxY = Math.ceil(vars.maxYamBmsVoltage*10)/10
            vars.barWidth = parseFloat(1505*60*60);
            vars.balanceVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_balancing_starting_voltage`].state;
            vars.floatVoltage = hass.states[`number.${ vars.bmsPrefixName }_cell_request_float_voltage`].state;
            vars.yamFloatVoltage = hass.states[`number.${ vars.yamPrefixName }_float_voltage`].state/16;
            vars.yamBulkVoltage = hass.states[`number.${ vars.yamPrefixName }_bulk_voltage`].state/16;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellVoltageId[1]
            offset: $ex {return (vars.barWidth+200)/100};
            filters:
              - map_y_numbers: vars.voltageArray[0]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[0] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[0] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[2]
            offset: $ex {return (vars.barWidth+200) * 1};
            filters:
              - map_y_numbers: vars.voltageArray[1]
            name: |
              $ex {
                return "cell2: " + vars.voltageArray[1];
              }
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[1] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[1] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[3]
            offset: $ex {return (vars.barWidth+200) * 2}
            filters:
              - map_y_numbers: vars.voltageArray[2]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[2] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[2] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[4]
            offset: $ex {return (vars.barWidth+200) * 3}
            filters:
              - map_y_numbers: vars.voltageArray[3]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[3] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[3] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[5]
            offset: $ex {return (vars.barWidth+200) * 4}
            filters:
              - map_y_numbers: vars.voltageArray[4]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[4] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[4] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[6]
            offset: $ex {return (vars.barWidth+200) * 5}
            filters:
              - map_y_numbers: vars.voltageArray[5]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[5] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[5] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[7]
            offset: $ex {return (vars.barWidth+200) * 6}
            filters:
              - map_y_numbers: vars.voltageArray[6]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[6] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[8]
            offset: $ex {return (vars.barWidth+200) * 7}
            filters:
              - map_y_numbers: vars.voltageArray[7]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[7] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[7] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[9]
            offset: $ex {return (vars.barWidth+200) * 8}
            filters:
              - map_y_numbers: vars.voltageArray[8]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[8] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[8] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[10]
            offset: $ex {return (vars.barWidth+200) * 9}
            filters:
              - map_y_numbers: vars.voltageArray[9]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[9] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[9] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[11]
            offset: $ex {return (vars.barWidth+200) * 10}
            filters:
              - map_y_numbers: vars.voltageArray[10]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[10] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[10] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[12]
            offset: $ex {return (vars.barWidth+200) * 11}
            filters:
              - map_y_numbers: vars.voltageArray[11]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[11] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[11] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[13]
            offset: $ex {return (vars.barWidth+200) * 12}
            filters:
              - map_y_numbers: vars.voltageArray[12]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[12] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[12] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[14]
            offset: $ex {return (vars.barWidth+200) * 13}
            filters:
              - map_y_numbers: vars.voltageArray[13]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[13] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[13] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[15]
            offset: $ex {return (vars.barWidth+200) * 14}
            filters:
              - map_y_numbers: vars.voltageArray[14]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[14] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[14] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: $ex vars.cellVoltageId[16]
            offset: $ex {return (vars.barWidth+200) * 15}
            filters:
              - map_y_numbers: vars.voltageArray[15]
            marker:
              color: |
                $ex {
                  if (vars.voltageArray[15] === vars.minValue && vars.isDeltaBigger) return vars.minColor;
                  if (vars.voltageArray[15] === vars.maxValue && vars.isDeltaBigger) return vars.maxColor;  
                  return 'grey';
                }
          - entity: ""
            type: line
            name: Balance Start Voltage
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: SteelBlue
            x: $ex [0, 10000000000000]
            "y": $ex [vars.balanceVoltage, vars.balanceVoltage]
          - entity: ""
            type: line
            name: JK BMS RFV
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: gray
            x: $ex [0, 50]
            "y": $ex [vars.floatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Float
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: OliveDrab
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamFloatVoltage, 0]
          - entity: ""
            type: line
            name: Yam Bulk
            yaxis: "y"
            showlegend: false
            line:
              width: 0.7
              dash: dot
              color: orangered
            x: $ex [0, 10000000000000]
            "y": $ex [vars.yamBulkVoltage, 0]
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          annotations:
            - x: null
              "y": $ex vars.yamBulkVoltage+0.004
              text: $ex "Yam Bulk " + vars.yamBulkVoltage.toFixed(3)+"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex vars.yamFloatVoltage+0.004
              text: $ex "Yam Float " + vars.yamFloatVoltage +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.balanceVoltage)+0.004
              text: >-
                $ex "JK Balanse " + parseFloat(vars.balanceVoltage).toFixed(3)
                +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
            - x: null
              "y": $ex parseFloat(vars.floatVoltage)+0.004
              text: $ex "JK Float " + parseFloat(vars.floatVoltage).toFixed(3) +"V"
              opacity: 0.2
              font:
                family: ""
                size: 10
                color: white
              showarrow: false
          showlegend: false
          height: 200
          xaxis:
            nticks: 1
            showticklabels: false
          yaxis:
            gridcolor: rgba(100,100,100,0.2)
            nticks: 4
            visible: false
            range:
              - $ex {return vars.minY}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: custom:plotly-graph
        collectDataFunction: |
          $ex {
            // change to yours
            vars.bmsPrefixName = "yambms_jk_bms_4";
            const bmsIds = [1, 2, 3, 4]; // array of JK bms IDs
            vars.yamPrefixName = "yambms_yambms_1";
            
            // array of cell voltage entities
            vars.cellResistanceId = []; 
            for (let i = 1; i <= 16; i++) {
              vars.cellResistanceId[i] = `sensor.${ vars.bmsPrefixName }_cell_resistance_${ (i < 10 ? '0' + i : i) }`; 
            }
            // Initialize array for resistance values
            vars.resistanceArray = [];
            for (let i = 1; i <= 16; i++) {

              let entityState = hass.states[vars.cellResistanceId[i]].state;
              vars.resistanceArray[i] = (parseFloat(entityState));
            }
            
            // Get min/max values
            vars.minValue = Math.min(...vars.resistanceArray);
            vars.maxValue = Math.max(...vars.resistanceArray);
            
            
            vars.minYamBmsResistance = Math.min(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_min`]?.state || 0)
            ));
            
            vars.maxYamBmsResistance = Math.max(...bmsIds.map(id => 
              parseFloat(hass.states[`sensor.yambms_jk_bms_${id}_cell_resistance_max`]?.state || 0)
            )); 
            
            // Define 16 color stops from OrangeRed to RoyalBlue
            vars.colorStops = [
              { value: 0, color: 'rgb(65,105,225)' },      // RoyalBlue
              { value: 0.067, color: 'rgb(85,115,220)' },
              { value: 0.133, color: 'rgb(105,125,215)' },
              { value: 0.2, color: 'rgb(125,135,210)' },
              { value: 0.267, color: 'rgb(145,145,205)' },
              { value: 0.333, color: 'rgb(165,155,200)' },
              { value: 0.4, color: 'rgb(185,165,195)' },
              { value: 0.467, color: 'rgb(205,175,190)' },
              { value: 0.533, color: 'rgb(225,185,185)' },
              { value: 0.6, color: 'rgb(245,195,180)' },
              { value: 0.667, color: 'rgb(255,175,150)' },
              { value: 0.733, color: 'rgb(255,155,120)' },
              { value: 0.8, color: 'rgb(255,135,90)' },
              { value: 0.867, color: 'rgb(255,115,60)' },
              { value: 0.933, color: 'rgb(255,95,30)' },
              { value: 1, color: 'rgb(255,69,0)' }        // OrangeRed
            ];
            
            vars.getColor = (value) => {
              const maxValue = vars.maxYamBmsResistance;
              const minValue = vars.minYamBmsResistance;

              // relativePosition from 0 to 1
              const relativePosition = (value - minValue) / (maxValue - minValue);

              let closestStop = vars.colorStops[0]; 
              vars.colorStops.forEach(stop => {
                  if (Math.abs(stop.value - relativePosition) < Math.abs(closestStop.value - relativePosition)) {
                      closestStop = stop;
                  }
              });

              return closestStop.color;
            };
            
            vars.barWidth = parseFloat(1505*60*60);
            vars.minY = Math.floor(vars.minYamBmsResistance*100)/100;
            vars.maxY = Math.ceil(vars.maxYamBmsResistance*1000)/1000;
          }
        view_layout:
          grid-area: total
        entities:
          - entity: $ex vars.cellResistanceId[1]
            offset: $ex {return (vars.barWidth)/100};
            filters:
              - map_y_numbers: vars.resistanceArray[1]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[1])}
          - entity: $ex vars.cellResistanceId[2]
            offset: $ex {return (vars.barWidth) * (2-1)};
            filters:
              - map_y_numbers: vars.resistanceArray[2]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[2])}
          - entity: $ex vars.cellResistanceId[3]
            offset: $ex {return (vars.barWidth) * (3-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[3]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[3])}
          - entity: $ex vars.cellResistanceId[4]
            offset: $ex {return (vars.barWidth) * (4-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[4]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[4])}
          - entity: $ex vars.cellResistanceId[5]
            offset: $ex {return (vars.barWidth) * (5-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[5]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[5])}
          - entity: $ex vars.cellResistanceId[6]
            offset: $ex {return (vars.barWidth) * (6-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[6]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[6])}
          - entity: $ex vars.cellResistanceId[7]
            offset: $ex {return (vars.barWidth) * (7-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[7]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[7])}
          - entity: $ex vars.cellResistanceId[8]
            offset: $ex {return (vars.barWidth) * (8-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[8]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[8])}
          - entity: $ex vars.cellResistanceId[9]
            offset: $ex {return (vars.barWidth) * (9-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[9]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[9])}
          - entity: $ex vars.cellResistanceId[10]
            offset: $ex {return (vars.barWidth) * (10-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[10]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[10])}
          - entity: $ex vars.cellResistanceId[11]
            offset: $ex {return (vars.barWidth) * (11-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[11]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[11])}
          - entity: $ex vars.cellResistanceId[12]
            offset: $ex {return (vars.barWidth) * (12-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[12]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[12])}
          - entity: $ex vars.cellResistanceId[13]
            offset: $ex {return (vars.barWidth) * (13-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[13]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[13])}
          - entity: $ex vars.cellResistanceId[14]
            offset: $ex {return (vars.barWidth) * (14-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[14]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[14])}
          - entity: $ex vars.cellResistanceId[15]
            offset: $ex {return (vars.barWidth) * (15-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[15]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[15])}
          - entity: $ex vars.cellResistanceId[16]
            offset: $ex {return (vars.barWidth) * (16-1)}
            filters:
              - map_y_numbers: vars.resistanceArray[16]
            marker:
              color: $ex {return vars.getColor(vars.resistanceArray[16])}
        hours_to_show: current_day
        defaults:
          entity:
            yaxis: "y"
            period: day
            type: bar
            width: $ex {return vars.barWidth - 700000}
            texttemplate: "%{y}"
        layout:
          margin:
            t: 5
            l: 20
            r: 20
            b: 20
          showlegend: false
          height: 97
          xaxis:
            nticks: 1
            showticklabels: false
            fixedrange: true
          yaxis:
            visible: false
            fixedrange: true
            range:
              - $ex {return vars.minY-0.0035}
              - $ex {return vars.maxY}
        config:
          displayModeBar: false
          scrollZoom: false
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_4_enable_bluetooth_connection
            name: Bluetooth
          - entity: binary_sensor.yambms_jk_bms_4_status_online
            name: Online ?
          - entity: binary_sensor.yambms_jk_bms_4_can_be_combined
            name: Can be combined
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
      - type: entity-filter
        entities:
          - entity: switch.yambms_jk_bms_4_charging
            name: Charge
          - entity: switch.yambms_jk_bms_4_discharging
            name: Discharge
          - entity: switch.yambms_jk_bms_4_balancing
            name: Balance
        conditions:
          - condition: state
            state_not: unavailable
        layout_options:
          grid_columns: 2
          grid_rows: 3
cards: []
